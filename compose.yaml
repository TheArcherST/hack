name: "hack"
services:
  postgres:
    image: postgres:17
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - ${COMPOSE__POSTGRES__HOST}:${COMPOSE__POSTGRES__PORT}:5432
    environment:
      POSTGRES_USER: ${COMPOSE__POSTGRES__USER}
      POSTGRES_PASSWORD: ${COMPOSE__POSTGRES__PASSWORD}
    healthcheck:
      test: [
        "CMD-SHELL", "pg_isready",
        "-d", "${COMPOSE__POSTGRES__DATABASE}",
        "-U", "${COMPOSE__POSTGRES__USER}"
      ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - ${COMPOSE__REDIS__HOST}:${COMPOSE__REDIS__PORT}:6379
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
  rest-server:
    build: ./python
    command: run-rest-server
    restart: unless-stopped
    ports:
      - ${COMPOSE__REST_SERVER__HOST}:${COMPOSE__REST_SERVER__PORT}:80
    env_file: ./python/.env
    depends_on:
      postgres:
        condition: service_healthy
  heartbeatd-non-dynamic-scheduler:
    build: ./python
    command: taskiq scheduler hack.heartbeatd.main:non_dynamic_scheduler
    restart: unless-stopped
    env_file: ./python/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  heartbeatd-scheduler:
    build: ./python
    command:  taskiq scheduler hack.heartbeatd.main:scheduler
    restart: unless-stopped
    env_file: ./python/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  heartbeatd-worker:
    build: ./python
    command: taskiq worker hack.heartbeatd.main:broker
    restart: unless-stopped
    env_file: ./python/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  tasksd:
    build: ./python
    command: run-tasksd
    restart: unless-stopped
    env_file: ./python/.env
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      replicas: 3
  bindingd:
    build: ./python
    command: run-bindingd
    restart: unless-stopped
    env_file: ./python/.env
    depends_on:
      postgres:
        condition: service_healthy
  tool-alembic:
    profiles:
      - tools
    build: ./python
    entrypoint: /usr/src/app/alembic-entrypoint.sh
    restart: no
    environment:
      EXTERNAL_UID: ${COMPOSE__UID}
      EXTERNAL_GID: ${COMPOSE__GID}
    env_file: ./python/.env
    depends_on:
      postgres:
        condition: service_healthy
  run-integration-tests:
    profiles:
      - tests
    build: ./python
    entrypoint: pytest
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
